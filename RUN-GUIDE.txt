==============================
项目构建与运行完整指南 (Windows CMD)
==============================

一、准备环境
1. 安装 JDK 17 (或你需要的 1.8)。执行:  java -version  确认输出版本.
2. 安装 Maven 3.9.x 并把 %MAVEN_HOME%\bin 加到 PATH。
3. 将 maven-settings.txt 内容复制到：
   用户级: %USERPROFILE%\.m2\settings.xml  (推荐)
   或全局: %MAVEN_HOME%\conf\settings.xml
4. 验证 Maven 可用：
   mvn -v

二、常见 Maven 命令 (不要只输入 mvn —— 那样会报 No goals have been specified)
1. 清理 + 编译
   mvn clean compile
2. 运行测试
   mvn test
3. 打包 (生成普通 jar 和依赖汇总 jar-with-dependencies)
   mvn clean package
   打包后文件: target\untitled-1.0-SNAPSHOT.jar (普通)
               target\untitled-1.0-SNAPSHOT-jar-with-dependencies.jar (包含依赖)
4. 安装到本地仓库 (供其他项目依赖)
   mvn clean install
5. 只做依赖解析检查
   mvn dependency:resolve -Dsilent=true
6. 使用 JavaFX 插件直接运行应用
   mvn clean javafx:run

三、JavaFX 运行方式
1. 使用插件 (推荐, 自动处理模块路径)
   mvn javafx:run
2. 手动运行可执行 JAR (需要模块路径参数)：
   (假设你单独下载了 JavaFX SDK 到 D:\javafx-sdk-21.0.2)
   java --module-path D:\javafx-sdk-21.0.2\lib --add-modules javafx.controls,javafx.graphics,javafx.fxml -jar target\untitled-1.0-SNAPSHOT-jar-with-dependencies.jar

   如果使用普通 JAR (非 assembly)：
   java --module-path D:\javafx-sdk-21.0.2\lib --add-modules javafx.controls,javafx.graphics,javafx.fxml -cp target\untitled-1.0-SNAPSHOT.jar org.example.App

四、依赖说明 (pom.xml 中已配置)
- Apache POI (Excel 读写)
- SQLite JDBC (嵌入式数据库，替代 Python sqlite3)
- SLF4J + Logback (日志体系，使用 src/main/resources/logback.xml)
- OkHttp (HTTP 请求)
- Jackson (JSON 解析 / 序列化)
- Commons-IO / Commons-Lang3 (文件与工具方法)
- Guava (缓存/集合/预取工具)
- Tablesaw (数据表处理，替代部分 pandas 功能)
- JavaFX (GUI：base, graphics, controls, fxml)
- JUnit Jupiter (单元测试)

五、生成包含依赖的可运行 Jar
mvn clean package
生成的: target\untitled-1.0-SNAPSHOT-jar-with-dependencies.jar
该文件仍需要 JavaFX 模块路径 (JavaFX 不是普通依赖能自动打进单 Jar 的模块化库)。

六、常见错误与解决
1. No goals have been specified:
   原因: 仅输入了 mvn。解决: 指定目标，如 mvn clean package 或 mvn javafx:run。
2. JavaFX 运行时组件缺失 (Error: JavaFX runtime components are missing):
   原因: 直接用 java -jar 运行，但未提供 --module-path 与 --add-modules。解决: 添加模块路径，或使用 mvn javafx:run。
3. 找不到类 (ClassNotFoundException):
   检查: 打包时是否使用了 assembly (jar-with-dependencies)。确认为 target 中存在依赖 Jar。
4. settings.xml 解析失败:
   确认注释格式必须是 <!-- comment --> 且不嵌套；复制本项目 maven-settings.txt 即可。
5. 依赖下载慢:
   确认已使用阿里云镜像 (settings.xml 中 mirrors)。首次下载仍需时间。
6. Java 版本差异:
   使用 JDK 1.8 请在 settings.xml 中去掉 jdk-17 profile 或修改 pom 中 <maven.compiler.release> 为 8 并添加 source/target。
7. Unsupported major.minor version:
   说明运行时使用了低版本 JRE。确认 JAVA_HOME 指向 JDK 17 (或你的目标版本)。
8. SQLite 写入锁 / 并发问题:
   确保同一连接串在多线程中使用连接池或串行访问。当前使用 sqlite-jdbc 自带的驱动 (默认串行化简单操作)。

七、项目结构确认 (标准 Maven)
src\main\java\org\example\...(源代码)
src\main\resources\logback.xml (日志配置)
src\test\java\org\example\AppTest.java (测试示例)
pom.xml (项目构建核心)
RUN-GUIDE.txt (本运行指南)

八、快速从零构建与运行 (复制执行)
1. mvn clean package
2. mvn javafx:run
   或:
   java --module-path D:\javafx-sdk-21.0.2\lib --add-modules javafx.controls,javafx.graphics,javafx.fxml -cp target\untitled-1.0-SNAPSHOT.jar org.example.App

九、排查 JavaFX SDK 位置
- 若未下载: https://openjfx.io/ 选择对应版本。
- 解压后 lib 目录需包含: javafx-base.jar / javafx-graphics.jar / javafx-controls.jar / javafx-fxml.jar 等。

十、可选增强 (后续可做, 当前可运行不强制)
- 添加 flyway/liquibase 管理数据库迁移。
- 添加缓存库 caffeine 替代部分 Guava 本地缓存。
- 使用 jpackage 打包为本地 EXE。
- 使用 javafx-maven-plugin 的 run.args 配置启动参数。

十一、验证日志是否生效
运行后查看控制台是否出现 logback 输出；如需文件日志，可在 logback.xml 中添加 RollingFileAppender。

十二、测试运行 (确保 surefire 使用 JUnit5)
mvn -q test
若输出 BUILD SUCCESS 即测试通过（可在 test 源目录新增更多测试类）。

==============================
如需进一步模块化重构或数据库脚本生成说明，请继续提出。
==============================

