package org.example.processing;

import javafx.scene.control.TableView; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.util.*; import java.util.stream.Collectors; import org.example.model.*; import org.example.persistence.NewDataManager;
/** 事件辅助 */
public class Events { private static final Logger LOGGER= LoggerFactory.getLogger(Events.class); public static void updateTableView(TableView<StudentRow> tv,List<Student> source,NewDataManager manager){ if(tv==null) return; tv.getItems().clear(); for(Student s: source){ StudentAwardRecord rec= manager.getRecord(s.getStudentId()); int recorded= rec!=null? rec.getRecordedAwardCount():0; String progress= recorded+"/"+s.getTotalAwards(); tv.getItems().add(new StudentRow(s.getStudentId(), s.getName(), s.getClassName(), progress)); } } public static List<Student> filterBySearch(List<Student> all,String query){ if(all==null) return List.of(); if(query==null||query.trim().isEmpty()) return all; String q=query.trim().toLowerCase(Locale.ROOT); return all.stream().filter(s-> String.valueOf(s.getStudentId()).contains(q) || (s.getName()!=null && s.getName().toLowerCase(Locale.ROOT).contains(q))).collect(Collectors.toList()); } public static List<Student> filterByStatus(List<Student> all,NewDataManager manager,String status){ if(all==null) return List.of(); if(status==null||status.equals("全部")) return all; List<Student> result=new ArrayList<>(); for(Student s: all){ StudentAwardRecord rec= manager.getRecord(s.getStudentId()); boolean complete= rec!=null && rec.getRecordedAwardCount()== s.getTotalAwards(); if("已录入完成".equals(status)&&complete) result.add(s); else if("未录入完成".equals(status)&&!complete) result.add(s); } return result; } public static void reloadRecords(NewDataManager manager){ try{ manager.reloadFromExcel(); } catch(Exception e){ LOGGER.error("刷新数据失败", e);} }}

