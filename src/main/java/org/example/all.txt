E:\部门\奖项证书收集\OVER\award_dialog.py
————————
# award_dialog.py

import tkinter as tk
from tkinter import ttk
from PIL import Image, ImageTk, ImageOps
import file_operations
from config import NEW_FILE_PATH
import logger
from image_utils import ImageLoader
import pandas as pd
import db_operation
log = logger.get_logger(__name__)




class AwardDialog:
    def __init__(self, parent, student_id, df, new_data, parent_app):
        self.top = tk.Toplevel(parent)
        self.top.title("奖项详情 of 🍊🐟")
        self.top.geometry("800x600")
        self.student_id = int(student_id)
        self.df = df
        self.new_data = new_data
        self.parent_app = parent_app
        self.student_data = df[df["学号"] == self.student_id].iloc[0]
        self.awards = self.student_data['奖项']
        self.current_award_index = 0

        self.original_image = None
        self.processed_image = None
        self.next_image = None
        self.prev_image = None

        self.image_loading = False

        self.button_states = {}

        self.image_loader = ImageLoader()

        self.create_widgets()
        self.update_award_display()

    def create_widgets(self):
        try:
            self.top_frame = tk.Frame(self.top)
            self.top_frame.pack(side=tk.TOP, fill=tk.X)

            self.buttons = [
                ("证书", 0.2),
                ("国", 0.8),
                ("省市", 0.5),
                ("校", 0.3),
                ("院", 0.2),
                ("无", 0.0)
            ]

            for label, points in self.buttons:
                btn = tk.Button(self.top_frame, text=label, command=lambda l=label, p=points: self.update_award_points(l, p))
                btn.pack(side=tk.LEFT, padx=5, pady=5)
                self.button_states[label] = {"button": btn, "selected": False}

            self.index_label = tk.Label(self.top_frame, text=f"1/{len(self.awards)}")
            self.index_label.pack(side=tk.LEFT, padx=5, pady=5)

            self.rotate_button = tk.Button(self.top_frame, text="翻转", command=self.rotate_image)
            self.rotate_button.pack(side=tk.LEFT, padx=5, pady=5)

            self.mirror_button = tk.Button(self.top_frame, text="镜像", command=self.mirror_image)
            self.mirror_button.pack(side=tk.LEFT, padx=5, pady=5)

            self.middle_frame = tk.Frame(self.top)
            self.middle_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

            self.award_label = tk.Label(self.middle_frame, text="")
            self.award_label.pack(side=tk.TOP, pady=10)

            self.image_frame = tk.Frame(self.middle_frame)
            self.image_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

            self.image_label = tk.Label(self.image_frame)
            self.image_label.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

            self.nav_frame = tk.Frame(self.middle_frame)
            self.nav_frame.pack(side=tk.BOTTOM, fill=tk.X)

            self.prev_button = tk.Button(self.nav_frame, text="上一张", command=self.prev_award)
            self.prev_button.pack(side=tk.LEFT, padx=5, pady=5)

            self.next_button = tk.Button(self.nav_frame, text="下一张", command=self.next_award)
            self.next_button.pack(side=tk.LEFT, padx=5, pady=5)

            self.image_label.bind('<Configure>', self.on_resize)
            self.update_button_states()
        except Exception as ex:
            logger.log_exception(log, ex, "Error creating widgets")

    def on_resize(self, event):
        if self.original_image is not None:
            self.display_image(self.original_image)

    def update_award_display(self):
        try:
            if not self.awards:
                return
            current_award = self.awards[self.current_award_index]
            self.award_label.config(text=current_award['奖项'])
            self.index_label.config(text=f"{self.current_award_index + 1}/{len(self.awards)}")

            image_url = current_award['证书图片']
            self.image_loading = True
            self.image_label.config(text="加载中...", image='')
            self.image_loader.load_image(image_url, self.display_image)

            if self.current_award_index + 1 < len(self.awards):
                next_image_url = self.awards[self.current_award_index + 1]['证书图片']
                self.image_loader.load_image(next_image_url, lambda img: setattr(self, 'next_image', img))

            if self.current_award_index - 1 >= 0:
                prev_image_url = self.awards[self.current_award_index - 1]['证书图片']
                self.image_loader.load_image(prev_image_url, lambda img: setattr(self, 'prev_image', img))

            self.update_button_states()
        except Exception as ex:
            logger.log_exception(log, ex, "Error updating award display")

    def display_image(self, image):
        try:
            width, height = self.image_label.winfo_width(), self.image_label.winfo_height() - 50
            if width > 1 and height > 1:
                self.processed_image = self.image_loader.resize_image(image, width, height)
                self.photo = ImageTk.PhotoImage(self.processed_image)
                self.image_label.config(image=self.photo, text="")
                self.image_label.image = self.photo
                self.original_image = image
                self.image_loading = False
            else:
                self.top.after(100, lambda: self.display_image(image))
        except Exception as ex:
            logger.log_exception(log, ex, "Error displaying image")

    def update_button_states(self):
        try:
            award_column = f'奖项{self.current_award_index + 1}'
            student_records = self.new_data.loc[self.new_data['学号'] == self.student_id, award_column]

            if not student_records.empty:
                previous_label = student_records.values[0]
            else:
                previous_label = ''

            for label in self.button_states:
                if label == previous_label:
                    self.button_states[label]["selected"] = True
                    self.button_states[label]["button"].config(relief=tk.SUNKEN)
                else:
                    self.button_states[label]["selected"] = False
                    self.button_states[label]["button"].config(relief=tk.RAISED)
        except Exception as ex:
            logger.log_exception(log, ex, "Error updating button states")

    def rotate_image(self):
        try:
            if self.original_image is not None:
                self.original_image = self.image_loader.rotate_image(self.original_image, 90)
                self.display_image(self.original_image)
        except Exception as ex:
            logger.log_exception(log, ex, "Error rotating image")

    def mirror_image(self):
        try:
            if self.original_image is not None:
                self.original_image = self.image_loader.mirror_image(self.original_image)
                self.display_image(self.original_image)
        except Exception as ex:
            logger.log_exception(log, ex, "Error mirroring image")

    def prev_award(self):
        try:
            if self.image_loading:
                self.image_label.config(image='', text="加载中...")
                return
            if self.current_award_index > 0:
                self.current_award_index -= 1
                self.image_label.config(image='', text="加载中...")
                if self.prev_image:
                    self.original_image = self.prev_image
                    self.prev_image = None
                self.update_award_display()
        except Exception as ex:
            logger.log_exception(log, ex, "Error showing previous award")

    def next_award(self):
        try:
            if self.image_loading:
                self.image_label.config(image='', text="加载中...")
                return
            if self.current_award_index < len(self.awards) - 1:
                self.current_award_index += 1
                self.image_label.config(image='', text="加载中...")
                if self.next_image:
                    self.original_image = self.next_image
                    self.next_image = None
                self.update_award_display()
        except Exception as ex:
            logger.log_exception(log, ex, "Error showing next award")

    def update_award_points(self, label, points):
        try:
            current_award = self.awards[self.current_award_index]
            current_award['分数'] = points

            def update_awards(awards):
                if self.student_id == self.student_data['学号']:
                    return self.awards
                return awards

            if self.student_id in self.new_data['学号'].values:
                student_record = self.new_data[self.new_data['学号'] == self.student_id]
            else:
                empty_row = self.new_data[self.new_data['学号'].isna() | (self.new_data['学号'] == '')]
                if not empty_row.empty:
                    empty_index = empty_row.index[0]
                    self.new_data.at[empty_index, '学号'] = int(self.student_id)
                    self.new_data.at[empty_index, '姓名'] = str(self.student_data['姓名'])
                    self.new_data.at[empty_index, '班级'] = str(self.student_data['班级'])
                    self.new_data.at[empty_index, '证书总分'] = 0.0
                    self.new_data.at[empty_index, '奖项总分'] = 0.0
                    self.new_data.at[empty_index, '已录入奖项数'] = 0
                    for i in range(1, 51):
                        self.new_data.at[empty_index, f'奖项{i}'] = ''
                    student_record = self.new_data[self.new_data.index == empty_index]
                else:
                    new_row = pd.DataFrame({
                        '学号': [int(self.student_id)],
                        '姓名': [str(self.student_data['姓名'])],
                        '班级': [str(self.student_data['班级'])],
                        '证书总分': [0.0],
                        '奖项总分': [0.0],
                        '已录入奖项数': [0],
                        '奖项1': [''],
                        '奖项2': [''],
                        '奖项3': [''],
                        '奖项4': [''],
                        '奖项5': [''],
                        '奖项6': [''],
                        '奖项7': [''],
                        '奖项8': [''],
                        '奖项9': [''],
                        '奖项10': [''],
                        '奖项11': [''],
                        '奖项12': [''],
                        '奖项13': [''],
                        '奖项14': [''],
                        '奖项15': [''],
                        '奖项16': [''],
                        '奖项17': [''],
                        '奖项18': [''],
                        '奖项19': [''],
                        '奖项20': [''],
                        '奖项21': [''],
                        '奖项22': [''],
                        '奖项23': [''],
                        '奖项24': [''],
                        '奖项25': [''],
                        '奖项26': [''],
                        '奖项27': [''],
                        '奖项28': [''],
                        '奖项29': [''],
                        '奖项30': [''],
                        '奖项31': [''],
                        '奖项32': [''],
                        '奖项33': [''],
                        '奖项34': [''],
                        '奖项35': [''],
                        '奖项36': [''],
                        '奖项37': [''],
                        '奖项38': [''],
                        '奖项39': [''],
                        '奖项40': [''],
                        '奖项41': [''],
                        '奖项42': [''],
                        '奖项43': [''],
                        '奖项44': [''],
                        '奖项45': [''],
                        '奖项46': [''],
                        '奖项47': [''],
                        '奖项48': [''],
                        '奖项49': [''],
                        '奖项50': ['']
                    })

                    new_row = new_row.dropna(axis=1, how='all')
                    self.new_data = self.new_data.dropna(axis=1, how='all')
                    self.new_data = pd.concat([self.new_data, new_row], ignore_index=True)
                    student_record = self.new_data[self.new_data['学号'] == self.student_id]

            self.new_data[f'奖项{self.current_award_index + 1}'] = self.new_data[f'奖项{self.current_award_index + 1}'].astype(str).fillna("")

            award_column = f'奖项{self.current_award_index + 1}'
            previous_label = self.new_data.loc[student_record.index, award_column].values[0]



            if previous_label == label:
                if label == "证书":
                    self.new_data.loc[student_record.index, '证书总分'] -= 0.2
                elif label == "国":
                    self.new_data.loc[student_record.index, '奖项总分'] -= 0.8
                elif label == "省市":
                    self.new_data.loc[student_record.index, '奖项总分'] -= 0.5
                elif label == "校":
                    self.new_data.loc[student_record.index, '奖项总分'] -= 0.3
                elif label == "院":
                    self.new_data.loc[student_record.index, '奖项总分'] -= 0.2

                self.new_data.loc[student_record.index, '已录入奖项数'] -= 1
                self.new_data.loc[student_record.index, award_column] = ''
            else:
                if previous_label != '':
                    if previous_label == "证书":
                        self.new_data.loc[student_record.index, '证书总分'] -= 0.2
                    elif previous_label == "国":
                        self.new_data.loc[student_record.index, '奖项总分'] -= 0.8
                    elif previous_label == "省市":
                        self.new_data.loc[student_record.index, '奖项总分'] -= 0.5
                    elif previous_label == "校":
                        self.new_data.loc[student_record.index, '奖项总分'] -= 0.3
                    elif previous_label == "院":
                        self.new_data.loc[student_record.index, '奖项总分'] -= 0.2

                if label == "证书":
                    self.new_data.loc[student_record.index, '证书总分'] += 0.2
                elif label == "国":
                    self.new_data.loc[student_record.index, '奖项总分'] += 0.8
                elif label == "省市":
                    self.new_data.loc[student_record.index, '奖项总分'] += 0.5
                elif label == "校":
                    self.new_data.loc[student_record.index, '奖项总分'] += 0.3
                elif label == "院":
                    self.new_data.loc[student_record.index, '奖项总分'] += 0.2

                if previous_label == '':
                    self.new_data.loc[student_record.index, '已录入奖项数'] += 1

                self.new_data.loc[student_record.index, award_column] = label
            db_operation.write_db(self.student_id,label,self.current_award_index,self.new_data.loc[student_record.index, '证书总分'].values[0],self.new_data.loc[student_record.index, '奖项总分'].values[0])
            file_operations.save_new_data(self.new_data, NEW_FILE_PATH)

            self.parent_app.refresh_data()
            self.update_button_states()
        except Exception as ex:
            logger.log_exception(log, ex, "Error updating award points")

# 🍊🐟 🐱
——————
E:\部门\奖项证书收集\OVER\buid_null.py
————————
# buid_null.py

import os
import warnings
import pandas as pd
import random
from logger import get_logger, log_exception
from config import QUANTITY, MAX_AWARDS, RANDOM_AWARDS_COUNT

logger = get_logger(__name__)

warnings.filterwarnings(
    'ignore',
    category=FutureWarning,
    message="Setting an item of incompatible dtype is deprecated and will raise an error in a future version of pandas."
)

# ——————————————————————
# 嵌入式文件恢复（原样保留，不做改动）
# ——————————————————————
def get_embedded_file():
    binary_data = bytes.fromhex('')
    return binary_data

# ——————————————————————
# 随机生成基础信息
# ——————————————————————
def generate_random_chinese_name():
    first_names = ['王', '李', '张', '刘', '陈', '杨', '赵', '黄', '周', '吴']
    last_names  = ['伟', '芳', '娜', '敏', '静', '秀英', '丽', '强', '磊', '军']
    return random.choice(first_names) + random.choice(last_names)

def generate_random_chinese_class():
    class_names = ['网络', '物联网', '信安', '移动互联']
    return random.choice(class_names) + str(random.randint(1000, 9999))

def generate_random_chinese_number():
    return str(random.randint(10**9, 10**11 - 1))

# ——————————————————————
# 奖项与图片生成
# ——————————————————————
def generate_random_chinese_award():
    award_list = ["码蹄杯", "蓝桥杯", "西门子杯", "网络安全", "全国职业技能大赛"]
    grade_list = ["国奖", "省奖", "校奖", "市奖", "院奖"]
    return random.choice(award_list) + random.choice(grade_list)

def generate_random_chinese_award_img():
    img_list = [
        "https://pics0.baidu.com/feed/0e2442a7d933c8959b2c26032f0464fe82020019.jpeg",
        "https://pics4.baidu.com/feed/a2cc7cd98d1001e91284fb12d96e6ee255e797e5.jpeg",
        "https://pics6.baidu.com/feed/18d8bc3eb13533fa9cf6bda9c9b3e81140345b66.jpeg",
        "https://pics0.baidu.com/feed/0824ab18972bd4077a0bfd7819e98b5f0db309d0.jpeg"
    ]
    return random.choice(img_list)

def get_award_list():
    """
    生成一个人的奖项列表：
      - 若 RANDOM_AWARDS_COUNT=True，则随机 n∈[0, MAX_AWARDS]
      - 若 RANDOM_AWARDS_COUNT=False，则 n = MAX_AWARDS
    返回格式：[[奖项1, 图片1], [奖项2, 图片2], …]
    """
    if RANDOM_AWARDS_COUNT:
        n = random.randint(1, MAX_AWARDS)
    else:
        n = MAX_AWARDS

    awards = []
    for _ in range(n):
        awards.append([
            generate_random_chinese_award(),
            generate_random_chinese_award_img()
        ])
    return awards

# ——————————————————————
# 写入 Excel 的坐标函数（保持原逻辑）
# ——————————————————————
df = None
null_file = 'null.xlsx'
path_file = 'path_to_your_file.xlsx'

def coordinate_writing(index, G, value):
    """
    在 df 的第 index 行第 G 列写入 value，并保存为 path_to_your_file.xlsx
    """
    if 1 <= index <= len(df) and 1 <= G <= len(df.columns):
        df.iloc[index - 1, G - 1] = value
        df.to_excel(path_file, index=False)
        logger.debug(f"已填充 行{index} 列{G}: {value} 并保存。")
    else:
        logger.debug("行号或列号超出范围，请检查。")

def award_writing(index, param, value):
    """
    从 param 列开始，按 [奖项, 图片] 两列依次写入 value 列表的内容
    """
    if 1 <= index <= len(df):
        col = param
        for award, img in value:
            try:
                df.iat[index - 1, col - 1] = award
            except:
                pass
            try:
                df.iat[index - 1, col] = img
            except:
                pass
            col += 2
        df.to_excel(path_file, index=False)

# ——————————————————————
# 按步骤填充：1-姓名 2-班级 3-学号 4-奖项列表
# ——————————————————————
def run(step):
    if step == 1:
        for i in range(1, QUANTITY + 1):
            coordinate_writing(i, 7, generate_random_chinese_name())
    elif step == 2:
        for i in range(1, QUANTITY + 1):
            coordinate_writing(i, 8, generate_random_chinese_class())
    elif step == 3:
        for i in range(1, QUANTITY + 1):
            coordinate_writing(i, 9, generate_random_chinese_number())
    elif step == 4:
        for i in range(1, QUANTITY + 1):
            award_writing(i, 10, get_award_list())

# ——————————————————————
# 主构建流程
# ——————————————————————
def build():
    global df
    # 若不存在原始文件，则先用嵌入式数据生成 null.xlsx
    if not os.path.exists(path_file):
        with open(null_file, 'wb') as f:
            f.write(get_embedded_file())
        df = pd.read_excel(null_file)
        # 按 4 步填充
        for step in range(1, 5):
            run(step)
        os.remove(null_file)

# ——————————————————————
# 脚本直接运行也可触发 build
# ——————————————————————
if __name__ == "__main__":
    try:
        build()
        logger.info("buid_null: 构建完成。")
    except Exception as e:
        log_exception(logger, e, "buid_null 构建失败")

——————
E:\部门\奖项证书收集\OVER\build_list.py
————————
import pandas as pd
from logger import get_logger, log_exception

logger = get_logger(__name__)

# Load the Excel file
def build():
    try:
        file_path = 'path_to_your_file.xlsx'  # 请替换为您的实际文件路径
        logger.debug(f'正在从 {file_path}加载Excel文件')
        excel_data = pd.ExcelFile(file_path)

        # Load data from the first sheet
        data = pd.read_excel(file_path, sheet_name='Sheet1')
        logger.debug('Excel数据加载成功')

        # Extract the required columns
        columns_of_interest = ['3、学号', '1、姓名', '2、班级'] + \
                              [col for col in data.columns if '奖项' in col and '请上传证书图片' not in col] + \
                              [col for col in data.columns if '请上传证书图片' in col]

        # Rename the columns for better readability
        column_mapping = {
            '3、学号': '学号',
            '1、姓名': '姓名',
            '2、班级': '班级',
        }
        for i in range(1, 51):
            column_mapping[f'{4 + (i-1)*2}、奖项{i}'] = f'奖项{i}'
            column_mapping[f'{5 + (i-1)*2}、请上传证书图片：'] = f'证书图片{i}'

        data = data[columns_of_interest].rename(columns=column_mapping)
        logger.debug('已成功重命名列')

        # Combine awards and certificate images into a single column
        def combine_awards(row):
            awards = []
            for i in range(1, 51):
                award = row.get(f'奖项{i}', '(空)')
                image = row.get(f'证书图片{i}', '(空)')
                if (award == "(空)" and image == "(空)"):
                    continue
                if not pd.isna(award) or not pd.isna(image):
                    awards.append({'奖项': award if not pd.isna(award) else '无名字', '证书图片': image if not pd.isna(image) else '无图片'})
            return awards

        data['奖项'] = data.apply(combine_awards, axis=1)
        logger.debug('奖项合并成功')

        # Select relevant columns and remove individual award columns
        final_data = data[['学号', '姓名', '班级', '奖项']]

        # Merge duplicate 学号 by combining their awards
        final_data = final_data.groupby('学号').agg({
            '姓名': 'first',
            '班级': 'first',
            '奖项': 'sum'
        }).reset_index()

        # Calculate the number of unique awards for each person
        # final_data['总奖项数'] = final_data['奖项'].apply(lambda x: len({award['奖项'] for award in x}))
        final_data['总奖项数'] = final_data['奖项'].apply(lambda x: len(x))

        # 打印结果
        # logger.info('Final data prepared')
        # print(final_data)

        # 保存最终数据到一个新的Excel文件
        output_path = 'Build_Summary.xlsx'
        final_data.to_excel(output_path, index=False)
        logger.debug(f'最终数据保存到 {output_path}')
    except Exception as e:
        log_exception(logger, e, '生成过程中出错')


# 🍊🐟 🐱
——————
E:\部门\奖项证书收集\OVER\config.py
————————
# config.py

FILE_PATH = 'Build_Summary.xlsx'
NEW_FILE_PATH = 'newFile.xlsx'
DB_PATH = "student.db"
QUANTITY = 10
MAX_AWARDS = 20
RANDOM_AWARDS_COUNT = True
USE_RANDOM_DATA = True

——————
E:\部门\奖项证书收集\OVER\data_loader.py
————————
import tkinter as tk
from tkinter import messagebox, filedialog
import buid_null
import build_list
from config import FILE_PATH, USE_RANDOM_DATA
import logger

log = logger.get_logger(__name__)

class StartupDialog(tk.Toplevel):
    """程序启动时的数据源选择对话框"""
    def __init__(self, parent):
        super().__init__(parent)
        self.choice = None
        self.title("请选择数据源")
        tk.Label(self, text="请选择数据加载方式：", font=("Arial", 14)).pack(padx=20, pady=10)
        frame = tk.Frame(self)
        frame.pack(pady=10)
        tk.Button(frame, text="从新文件加载", width=15,
                  command=lambda: self._select('new')).grid(row=0, column=0, padx=5)
        tk.Button(frame, text="从上次文件加载", width=15,
                  command=lambda: self._select('last')).grid(row=0, column=1, padx=5)
        tk.Button(frame, text="使用随机数据测试", width=15,
                  command=lambda: self._select('random')).grid(row=0, column=2, padx=5)
        self.protocol("WM_DELETE_WINDOW", lambda: None)
        self.transient(parent)
        self.grab_set()
        parent.wait_window(self)
    def _select(self, choice):
        self.choice = choice
        self.destroy()


def initialize_data(root):
    """
    根据用户选择：
      - 'new'  弹文件对话框载入任意新文件
      - 'last' 载入 config.FILE_PATH
      - 'random' 若 USE_RANDOM_DATA 则 buid_null.build(), 否则退回 'last'
    生成或构建 Build_Summary.xlsx
    """
    dlg = StartupDialog(root)
    choice = dlg.choice

    if choice == 'new':
        path = filedialog.askopenfilename(
            title="请选择新的 Excel 文件",
            filetypes=[("Excel 文件", "*.xlsx *.xls")]
        )
        if not path:
            messagebox.showerror("错误", "未选择文件，程序退出。")
            root.destroy()
            return False
        build_list.build(path)
    elif choice == 'last':
        build_list.build(FILE_PATH)
    elif choice == 'random':
        if USE_RANDOM_DATA:
            buid_null.build()
        else:
            log.info("随机数据被禁用，使用上次文件加载。")
            build_list.build(FILE_PATH)
    else:
        messagebox.showerror("错误", "未选择加载方式，程序退出。")
        root.destroy()
        return False

    return True

——————
E:\部门\奖项证书收集\OVER\data_processing.py
————————
# data_processing.py

import pandas as pd
import ast
from config import FILE_PATH, NEW_FILE_PATH

def load_data():
    df = pd.read_excel(FILE_PATH)
    df['奖项'] = df['奖项'].apply(lambda x: ast.literal_eval(x) if pd.notna(x) else [])
    df['已录入奖项数'] = df['奖项'].apply(len)
    return df

def load_new_data():
    new_data = pd.read_excel(NEW_FILE_PATH)
    award_columns = [f'奖项{i}' for i in range(1, 51)]
    for col in award_columns:
        if col not in new_data.columns:
            new_data[col] = ""
        else:
            new_data[col] = new_data[col].fillna("").astype(str)
    return new_data

——————
E:\部门\奖项证书收集\OVER\db_operation.py
————————
import sqlite3
from logger import get_logger
from config import DB_PATH

logger = get_logger(__name__)

def init_db():
    logger.debug("初始化数据库")
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS students (
        student_id INTEGER PRIMARY KEY,
        cert_total_points REAL DEFAULT 0.0,
        award_total_points REAL DEFAULT 0.0
    )
    ''')
    conn.commit()
    conn.close()


def write_db(id,label,index,val1,val2):
    print("学号"+ str(id))
    print("类型" +label)
    print("索引" + str(index))
    print("证书总分"+str(val1))
    print("奖项总分"+str(val2))
    # 打开数据库连接
    conn = sqlite3.connect(DB_PATH)
    cursor = conn.cursor()
    logger.debug("数据库链接成功")
    # 确保表存在
    cursor.execute('''
    CREATE TABLE IF NOT EXISTS students (
        student_id INTEGER PRIMARY KEY,
        cert_total_points REAL DEFAULT 0.0,
        award_total_points REAL DEFAULT 0.0
    )
    ''')


    # 更新奖项数据
    #TODO 将学号做键，更新证书总分与奖项总分
    cursor.execute('''
    INSERT INTO students (student_id, cert_total_points, award_total_points)
    VALUES (?, ?, ?)
    ON CONFLICT(student_id) DO UPDATE SET
        cert_total_points=excluded.cert_total_points,
        award_total_points=excluded.award_total_points
    ''', (id, val1, val2))
    conn.commit()
    conn.close()
    logger.debug("数据存入成功")

init_db()

——————
E:\部门\奖项证书收集\OVER\events.py
————————
# events.py

import file_operations
import logger
from config import NEW_FILE_PATH
from award_dialog import AwardDialog

log = logger.get_logger(__name__)

class EventHandlers:
    def __init__(self, app):
        self.app = app

    def update_treeview(self):
        try:
            for row in self.app.gui_elements.tree.get_children():
                self.app.gui_elements.tree.delete(row)

            for _, row in self.app.filtered_df.iterrows():
                student_id = row["学号"]
                if str(student_id) in self.app.new_data['学号'].astype(str).values:
                    new_award_count = self.app.new_data[self.app.new_data['学号'].astype(str) == str(student_id)]['已录入奖项数'].values[0]
                else:
                    new_award_count = 0
                awards_count = f"{new_award_count}/{row['总奖项数']}"
                self.app.gui_elements.tree.insert("", "end", values=(row["学号"], row["姓名"], row["班级"], awards_count))
        except Exception as ex:
            logger.log_exception(log, ex, "Error updating treeview")

    def refresh_data(self):
        try:
            self.app.new_data = file_operations.load_new_data(NEW_FILE_PATH)
            self.update_treeview()
        except Exception as ex:
            logger.log_exception(log, ex, "Error refreshing data")

    def search(self):
        try:
            query = self.app.gui_elements.search_entry.get()
            if query:
                self.app.filtered_df = self.app.df[self.app.df['姓名'].str.contains(query) | self.app.df['学号'].astype(str).str.contains(query)]
            else:
                self.app.filtered_df = self.app.df.copy()
            self.update_treeview()
        except Exception as ex:
            logger.log_exception(log, ex, "Error searching data")

    def filter_data(self, event):
        try:
            filter_value = self.app.gui_elements.filter_combobox.get()
            if filter_value == "已录入完成":
                self.app.filtered_df = self.app.df[self.app.df.apply(lambda row: str(row["学号"]) in self.app.new_data['学号'].astype(str).values and
                                                                                 self.app.new_data[self.app.new_data['学号'].astype(str) == str(row["学号"])]["已录入奖项数"].values[0] == row["总奖项数"], axis=1)]
            elif filter_value == "未录入完成":
                self.app.filtered_df = self.app.df[self.app.df.apply(lambda row: str(row["学号"]) not in self.app.new_data['学号'].astype(str).values or
                                                                                 self.app.new_data[self.app.new_data['学号'].astype(str) == str(row["学号"])]["已录入奖项数"].values[0] < row["总奖项数"], axis=1)]
            else:
                self.app.filtered_df = self.app.df.copy()
            self.update_treeview()
        except Exception as ex:
            logger.log_exception(log, ex, "Error filtering data")

    def open_award_dialog(self, event):
        try:
            selected_item = self.app.gui_elements.tree.selection()[0]
            student_id = self.app.gui_elements.tree.item(selected_item, "values")[0]
            self.app.award_dialog = AwardDialog(self.app.root, student_id, self.app.df, self.app.new_data, self.app)
        except Exception as ex:
            logger.log_exception(log, ex, "Error opening award dialog")

——————
E:\部门\奖项证书收集\OVER\file_operations.py
————————
# file_operations.py

import pandas as pd
import ast
from logger import get_logger, log_exception

logger = get_logger(__name__)

def load_data(file_path):
    df = pd.read_excel(file_path)
    logger.debug(df['奖项'])
    df['奖项'] = df['奖项'].apply(ast.literal_eval)
    df['已录入奖项数'] = df['奖项'].apply(len)
    return df

def load_new_data(file_path):
    new_data = pd.read_excel(file_path)
    award_columns = [f'奖项{i}' for i in range(1, 51)]
    for col in award_columns:
        if col not in new_data.columns:
            new_data[col] = ""
        else:
            new_data[col] = new_data[col].fillna("").astype(str)
    return new_data

def save_new_data(new_data, file_path):
    new_data.to_excel(file_path, index=False)

——————
E:\部门\奖项证书收集\OVER\gui_elements.py
————————
# gui_elements.py

import tkinter as tk
from tkinter import ttk

class GUIElements:
    def __init__(self, root, search_callback, filter_callback):
        self.root = root
        self.search_callback = search_callback
        self.filter_callback = filter_callback
        self.create_top_frame()
        self.create_middle_frame()

    def create_top_frame(self):
        self.top_frame = tk.Frame(self.root)
        self.top_frame.pack(side=tk.TOP, fill=tk.X)

        self.search_label = tk.Label(self.top_frame, text="查找:")
        self.search_label.pack(side=tk.LEFT, padx=5, pady=5)

        self.search_entry = tk.Entry(self.top_frame)
        self.search_entry.pack(side=tk.LEFT, padx=5, pady=5)

        self.search_button = tk.Button(self.top_frame, text="查找", command=self.search_callback)
        self.search_button.pack(side=tk.LEFT, padx=5, pady=5)

        self.filter_combobox = ttk.Combobox(self.top_frame, values=["全部", "已录入完成", "未录入完成"])
        self.filter_combobox.pack(side=tk.LEFT, padx=5, pady=5)
        self.filter_combobox.current(0)
        self.filter_combobox.bind("<<ComboboxSelected>>", self.filter_callback)

    def create_middle_frame(self):
        self.middle_frame = tk.Frame(self.root)
        self.middle_frame.pack(side=tk.TOP, fill=tk.BOTH, expand=True)

        self.tree = ttk.Treeview(self.middle_frame, columns=("学号", "姓名", "班级", "奖项"), show="headings")
        self.tree.heading("学号", text="学号")
        self.tree.heading("姓名", text="姓名")
        self.tree.heading("班级", text="班级")
        self.tree.heading("奖项", text="奖项")

        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        self.scrollbar = ttk.Scrollbar(self.middle_frame, orient="vertical", command=self.tree.yview)
        self.scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        self.tree.configure(yscroll=self.scrollbar.set)

——————
E:\部门\奖项证书收集\OVER\image_utils.py
————————
# image_utils.py

import threading
import requests
from PIL import Image, ImageTk, ImageOps
from io import BytesIO
import queue
import logger

# 获取日志记录器
log = logger.get_logger(__name__)

class ImageLoader:
    def __init__(self):
        self.image_queue = queue.Queue()

    def load_image(self, url, callback):
        def _load_image():
            try:
                response = requests.get(url)
                image_data = response.content
                image = Image.open(BytesIO(image_data))
                callback(image)
            except Exception as ex:
                logger.log_exception(log, ex, f"Error loading image from {url}")

        threading.Thread(target=_load_image).start()

    @staticmethod
    def resize_image(image, width, height):
        aspect_ratio = image.width / image.height
        if width / height > aspect_ratio:
            new_height = height
            new_width = int(new_height * aspect_ratio)
        else:
            new_width = width
            new_height = int(new_width / aspect_ratio)
        return image.resize((new_width, new_height), Image.LANCZOS)

    @staticmethod
    def rotate_image(image, degrees):
        return image.rotate(degrees, expand=True)

    @staticmethod
    def mirror_image(image):
        return ImageOps.mirror(image)

——————
E:\部门\奖项证书收集\OVER\logger.py
————————
# logger.py

import logging

# 配置日志记录
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.FileHandler("app.log"), logging.StreamHandler()])
# 🍊🐟🐱
def get_logger(name):
    return logging.getLogger(name)

def log_exception(logger, ex, message=""):
    logger.error(message, exc_info=ex)

——————
E:\部门\奖项证书收集\OVER\main.py
————————
# main.py

import tkinter as tk

import buid_null
import file_operations
import template_initializer
from gui_elements import GUIElements
from config import FILE_PATH, NEW_FILE_PATH,USE_RANDOM_DATA
import logger
from events import EventHandlers

# 获取日志记录器
log = logger.get_logger(__name__)

class AwardApp:
    def __init__(self, root):
        if USE_RANDOM_DATA:
            buid_null.build()
        template_initializer.initialize_template()
        self.root = root
        self.root.title("奖项管理系统 of 🍊🐟")
        self.root.geometry("1000x600")
        log.debug("橙子鱼与猫")
        try:
            self.df = file_operations.load_data(FILE_PATH)
            self.filtered_df = self.df.copy()
            self.new_data = file_operations.load_new_data(NEW_FILE_PATH)

            award_columns = [f'奖项{i}' for i in range(1, 51)]
            for col in award_columns:
                self.new_data[col] = self.new_data[col].fillna("").astype(str)

            self.event_handlers = EventHandlers(self)
            self.update_treeview = self.event_handlers.update_treeview
            self.refresh_data = self.event_handlers.refresh_data
            self.search = self.event_handlers.search
            self.filter_data = self.event_handlers.filter_data
            self.open_award_dialog = self.event_handlers.open_award_dialog

            self.gui_elements = GUIElements(self.root, self.search, self.filter_data)
            self.gui_elements.tree.bind("<Double-1>", self.open_award_dialog)

            self.update_treeview()
        except Exception as ex:
            logger.log_exception(log, ex, "Error initializing AwardApp")

if __name__ == "__main__":
    try:
        root = tk.Tk()
        app = AwardApp(root)
        root.mainloop()
    except Exception as ex:
        logger.log_exception(log, ex, "Error running main application")

——————
E:\部门\奖项证书收集\OVER\README.md
————————

# 奖项管理系统 

## 简介

该项目是一个奖项管理系统，旨在管理和展示奖项信息。系统从Excel文件中读取数据，并在图形用户界面中进行展示和操作。项目包括多个模块，每个模块负责特定的功能，如数据读取、模板初始化、图像处理等。

## 目录结构

```
project/
│
├── main.py
├── award_app.py
├── award_dialog.py
├── gui_elements.py
├── build_list.py
├── template_initializer.py
├── file_operations.py
├── image_utils.py
├── logger.py
├── requirements.txt
└── README.md
```

## 文件和模块说明
### config.py
- **功能**: 程序配置。
- **参数**:
  - **FILE_PATH**:生成中间文件文件路径
  - **NEW_FILE_PATH**:数据持久化文件文件路径
  - **DB_PATH**:数据库文件文件路径
  - **QUANTITY**:随机生成的人数
  - **MAX_AWARDS**:最大随机奖项数
  - **RANDOM_AWARDS_COUNT**:是否在[1,MAX_AWARDS]范围内随机
### main.py

- **功能**: 初始化主程序，包括日志配置和主窗口创建。
- **主要方法**:
  - `__init__(self)`: 初始化主程序，包括日志配置和主窗口创建。调用`AwardApp`初始化整个应用程序。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法初始化日志配置，并创建主窗口对象，启动奖项应用程序。
  - `AwardApp.__init__(self, root)`: 初始化奖项应用程序，包括加载数据和创建GUI。
    - **参数**:
      - `root`: 主窗口对象
    - **返回**: 无
    - **说明**: 该方法初始化奖项应用程序，加载数据并创建图形用户界面。
  - `build_list.build(file_path)`: 从Excel文件中构建数据列表。
    - **参数**:
      - `file_path`: Excel文件路径
    - **返回**: DataFrame对象
    - **说明**: 该方法从指定的Excel文件中读取数据，并返回构建的数据列表。
  - `template_initializer.initialize_template(file_path)`: 初始化模板，设置模板文件。
    - **参数**:
      - `file_path`: 模板文件路径
    - **返回**: 无
    - **说明**: 该方法初始化模板文件，设置模板相关配置。

### award_app.py

- **功能**: 奖项应用程序的主模块，负责加载数据和创建用户界面。
- **主要方法**:
  - `__init__(root)`: 初始化奖项应用程序，包括加载数据和创建GUI。设置窗口标题、大小，并加载奖项数据。
    - **参数**:
      - `root`: 主窗口对象
    - **返回**: 无
    - **说明**: 该方法初始化奖项应用程序，包括加载数据和创建图形用户界面。
  - `get_logger()`: 获取日志实例，用于记录日志。配置日志记录器，方便调试和错误记录。
    - **参数**: 无
    - **返回**: Logger对象
    - **说明**: 该方法返回一个Logger对象，用于记录日志信息。
  - `pd.read_excel(file_path)`: 从Excel文件中读取数据。使用pandas库加载Excel文件中的奖项数据。
    - **参数**:
      - `file_path`: 文件路径
    - **返回**: DataFrame对象
    - **说明**: 该方法从指定的Excel文件中读取数据，并返回一个DataFrame对象。
  - `create_widgets()`: 创建应用程序的GUI部件，如按钮和树状视图。初始化并布置界面元素。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法创建并初始化所有需要的GUI控件。
  - `update_treeview()`: 更新树状视图，显示读取的数据。将数据加载到树状视图控件中。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法更新树状视图，显示加载的数据。
  - `refresh_data()`: 刷新数据，重新加载并更新显示。重新从Excel文件中读取数据并更新界面显示。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法刷新数据，从Excel文件中重新读取数据并更新显示。
  - `search(keyword)`: 搜索功能，根据用户输入查找数据。在数据集中搜索匹配的记录并显示结果。
    - **参数**:
      - `keyword`: 搜索关键字
    - **返回**: 无
    - **说明**: 该方法根据用户输入的关键字在数据集中搜索匹配的记录并显示结果。
  - `filter_data(condition)`: 根据条件过滤数据。应用用户指定的过滤条件，更新显示的数据。
    - **参数**:
      - `condition`: 过滤条件
    - **返回**: 无
    - **说明**: 该方法应用用户指定的过滤条件，更新显示的数据。
  - `open_award_dialog(award_id)`: 打开奖项对话框，显示详细信息。弹出窗口显示选中奖项的详细信息和操作选项。
    - **参数**:
      - `award_id`: 奖项ID
    - **返回**: 无
    - **说明**: 该方法打开奖项对话框，显示选中奖项的详细信息和操作选项。

### award_dialog.py

- **功能**: 奖项详情对话框模块，显示和操作单个奖项的详细信息。
- **主要方法**:
  - `get_logger()`: 获取日志实例，用于记录日志。配置日志记录器，方便调试和错误记录。
    - **参数**: 无
    - **返回**: Logger对象
    - **说明**: 该方法返回一个Logger对象，用于记录日志信息。
  - `create_widgets()`: 创建对话框部件，如标签和按钮。初始化并布置界面元素。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法创建并初始化对话框中的所有需要的GUI控件。
  - `update_award_display(award_data)`: 更新奖项显示，显示选中的奖项信息。根据当前选中的奖项，更新对话框中的信息。
    - **参数**:
      - `award_data`: 奖项数据
    - **返回**: 无
    - **说明**: 该方法根据传入的奖项数据更新对话框中的显示内容。
  - `load_image(image_path)`: 加载奖项的图片。从文件或URL加载图片，显示在对话框中。
    - **参数**:
      - `image_path`: 图片路径或URL
    - **返回**: Image对象
    - **说明**: 该方法从指定的文件路径或URL加载图片，并返回一个PIL.Image对象。
  - `display_image(image)`: 显示奖项图片。在对话框中展示加载的图片。
    - **参数**:
      - `image`: Image对象
    - **返回**: 无
    - **说明**: 该方法在对话框中显示传入的PIL.Image对象。
  - `update_button_states()`: 更新按钮状态，根据当前奖项设置按钮的可用性。根据当前的状态启用或禁用对话框中的按钮。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法根据当前奖项的状态更新对话框中按钮的可用性。
  - `update_award_points(new_points)`: 更新奖项积分，根据评分更新积分显示。根据用户输入的评分，更新奖项的总积分。
    - **参数**:
      - `new_points`: 新积分
    - **返回**: 无
    - **说明**: 该方法根据传入的新积分更新奖项的总积分显示。
  - `rotate_image(angle)`: 旋转奖项图片。将显示的图片按指定角度旋转。
    - **参数**:
      - `angle`: 旋转角度
    - **返回**: Image对象
    - **说明**: 该方法将显示的图片按指定角度旋转，并返回旋转后的PIL.Image对象。
  - `mirror_image()`: 镜像奖项图片。将显示的图片水平翻转。
    - **参数**: 无
    - **返回**: Image对象
    - **说明**: 该方法将显示的图片水平翻转，并返回镜像后的PIL.Image对象。
  - `prev_award()`: 显示上一个奖项。加载并显示列表中的上一个奖项。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法加载并显示奖项列表中的上一个奖项。
  - `next_award()`: 显示下一个奖项。加载并显示列表中的下一个奖项。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法加载并显示奖项列表中的下一个奖项。
    
### gui_elements.py

- **功能**: GUI元素模块，创建和管理应用程序的基本图形元素。
- **主要方法**:
  - `__init__(root)`: 初始化GUI元素，包括按钮和标签的创建。设置界面基本元素。
    - **参数**:
      - `root`: 主窗口对象
    - **返回**: 无
    - **说明**: 该方法初始化GUI元素，包括创建按钮和标签等界面基本元素。
  - `create_widgets()`: 创建所有的GUI部件。初始化并布置所有需要的控件。
    - **参数**: 无
    - **返回**: 无
    - **说明**: 该方法创建并初始化所有需要的GUI控件。
  - `update_treeview(data)`: 更新树状视图，显示当前数据。刷新树状视图中的数据。
    - **参数**:
      - `data`: 数据集
    - **返回**: 无
    - **说明**: 该方法更新树状视图，显示传入的数据集。
  - `update_status(status)`: 更新状态栏，显示当前状态。在状态栏中显示应用程序当前的状态信息。
    - **参数**:
      - `status`: 状态信息
    - **返回**: 无
    - **说明**: 该方法更新状态栏，显示传入的状态信息。

### buid_null.py
- **功能**: 构建随机初始文档。
- **主要方法**:
  - `build()`: 构建随机初始文档。
    - **参数**:无
    - **返回**: 无
    - **说明**: 随机生成数据。

### build_list.py

- **功能**: 构建数据列表模块，从Excel文件中读取并处理数据。
- **主要方法**:
  - `build(file_path)`: 从Excel文件中构建数据列表。读取Excel文件并转换为可操作的数据结构。
    - **参数**:
      - `file_path`: 文件路径
    - **返回**: DataFrame对象
    - **说明**: 该方法接受Excel文件的路径，读取文件并将数据转换为pandas的DataFrame对象。
  - `get_logger()`: 获取日志实例，用于记录日志。配置日志记录器，方便调试和错误记录。
    - **参数**: 无
    - **返回**: Logger对象
    - **说明**: 该方法返回一个Logger对象，用于记录日志信息。
  - `pd.ExcelFile(file_path)`: 加载Excel文件。使用pandas库加载Excel文件。
    - **参数**:
      - `file_path`: 文件路径
    - **返回**: ExcelFile对象
    - **说明**: 该方法接受文件路径，使用pandas的ExcelFile类加载Excel文件。
  - `pd.read_excel(file_path)`: 从Excel文件中读取工作表。将Excel工作表转换为pandas DataFrame。
    - **参数**:
      - `file_path`: 文件路径
    - **返回**: DataFrame对象
    - **说明**: 该方法接受Excel文件的路径，使用pandas的read_excel函数读取工作表并返回DataFrame对象。
  - `logger.info(message)`: 记录信息日志。在日志中记录常规操作信息。
    - **参数**:
      - `message`: 信息字符串
    - **返回**: 无
    - **说明**: 该方法记录一条信息级别的日志，用于记录常规操作信息。
  - `pd.DataFrame.groupby(by)`: 在DataFrame中分组数据。按指定列对数据进行分组。
    - **参数**:
      - `by`: 分组列名
    - **返回**: GroupBy对象
    - **说明**: 该方法在DataFrame中按指定列名分组数据。
  - `pd.DataFrame.agg(aggregation)`: 聚合数据。对分组数据应用聚合函数。
    - **参数**:
      - `aggregation`: 聚合函数
    - **返回**: DataFrame对象
    - **说明**: 该方法对分组数据应用聚合函数，返回聚合后的DataFrame对象。
  - `pd.DataFrame.reset_index()`: 重置DataFrame的索引。重置索引，使分组后的结果成为新的DataFrame。
    - **参数**: 无
    - **返回**: DataFrame对象
    - **说明**: 该方法重置DataFrame的索引，使其成为新的DataFrame。
  - `pd.DataFrame.to_excel(file_path)`: 将DataFrame保存到Excel文件。将处理后的数据写入Excel文件。
    - **参数**:
      - `file_path`: 文件路径
    - **返回**: 无
    - **说明**: 该方法将DataFrame保存到指定路径的Excel文件中。
  - `logger.debug(message)`: 记录调试日志。在日志中记录调试信息。
    - **参数**:
      - `message`: 调试信息字符串
    - **返回**: 无
    - **说明**: 该方法记录一条调试级别的日志信息。
  - `logger.error(message)`: 记录错误日志。在日志中记录错误信息。
    - **参数**:
      - `message`: 错误信息字符串
    - **返回**: 无
    - **说明**: 该方法记录一条错误级别的日志信息。

### template_initializer.py

- **功能**: 模板初始化模块，设置和管理模板文件。
- **主要方法**:
  - `initialize_template(file_path)`: 初始化模板，设置模板文件。
    - **参数**:
      - `file_path`: 模板文件路径
    - **返回**: 无
    - **说明**: 该方法接受模板文件路径，初始化并设置模板文件。
  - `get_logger(name)`: 获取日志实例，用于记录日志。
    - **参数**:
      - `name`: 日志记录器的名称
    - **返回**: Logger 对象
    - **说明**: 该方法获取一个日志记录器实例，用于记录日志信息。
  - `logger.debug(msg)`: 记录调试日志。
    - **参数**:
      - `msg`: 调试信息
    - **返回**: 无
    - **说明**: 该方法记录一条调试级别的日志信息。
  - `get_embedded_file(file_name)`: 获取嵌入的文件内容。
    - **参数**:
      - `file_name`: 嵌入文件的名称
    - **返回**: 字节数据
    - **说明**: 该方法获取嵌入文件的内容，并以字节数据形式返回。
  - `bytes.fromhex(hex_str)`: 将十六进制字符串转换为字节数据。
    - **参数**:
      - `hex_str`: 十六进制字符串
    - **返回**: 字节数据
    - **说明**: 该方法将十六进制字符串转换为字节数据。
  - `build(data, template)`: 使用模板构建数据列表。
    - **参数**:
      - `data`: 数据列表
      - `template`: 模板文件
    - **返回**: 构建后的数据列表
    - **说明**: 该方法接受数据列表和模板文件，使用模板构建并返回新的数据列表。

### file_operations.py

- **功能**: 文件操作模块，负责数据文件的读写操作。
- **主要方法**:
  - `save_new_data(data, file_path)`: 保存新数据到文件，确保数据持久化。
    - **参数**:
      - `data`: 要保存的数据
      - `file_path`: 保存数据的文件路径

### image_utils.py

- **功能**: 图像处理模块，处理奖项图片的加载、调整和转换。
- **主要方法**:
  - `load_image(file_path)`: 加载图像文件，返回图像对象。
    - **参数**:
      - `file_path`: 图像文件的路径
    - **返回**: PIL.Image 对象
    - **说明**: 该方法接受一个参数，即图像文件的路径，使用 PIL 库加载图像并返回一个 PIL.Image 对象。
  - `resize_image(image, size)`: 调整图像大小，返回调整后的图像。
    - **参数**:
      - `image`: PIL.Image 对象
      - `size`: 调整后的尺寸 (宽, 高)
    - **返回**: 调整后的 PIL.Image 对象
    - **说明**: 该方法接受一个 PIL.Image 对象和一个新的尺寸（宽, 高），返回调整后的图像对象。
  - `rotate_image(image, angle)`: 旋转图像，返回旋转后的图像。
    - **参数**:
      - `image`: PIL.Image 对象
      - `angle`: 旋转角度
    - **返回**: 旋转后的 PIL.Image 对象
    - **说明**: 该方法接受一个 PIL.Image 对象和旋转角度，返回旋转后的图像对象。
  - `mirror_image(image)`: 镜像图像，返回镜像后的图像。
    - **参数**:
      - `image`: PIL.Image 对象
    - **返回**: 镜像后的 PIL.Image 对象
    - **说明**: 该方法接受一个 PIL.Image 对象，返回镜像后的图像对象。

### db_operation.py
- **功能**: 数据库模块，配置和管理数据库。
- **主要方法**:
- `write_db(id,label,index,val1,val2)`: 基本日志配置，设置日志格式和级别。
  - **参数**:
    - `id`: 学号
    - `label`: 按键类型
    - `index`: 奖状索引
    - `val1`:证书总分
    - `val2`:奖状总分
  - **返回**: 无
  - **说明**: 该方法用于根据参数更新数据库
### logger.py

- **功能**: 日志模块，配置和管理日志记录。
- **主要方法**:
  - `logging.basicConfig(**kwargs)`: 基本日志配置，设置日志格式和级别。
    - **参数**:
      - `**kwargs`: 日志配置参数，例如格式、级别等
    - **返回**: 无
    - **说明**: 该方法用于配置日志系统的基础设置，例如日志格式、日志级别等。
  - `logging.FileHandler(filename)`: 文件处理程序，用于将日志写入文件。
    - **参数**:
      - `filename`: 日志文件的路径
    - **返回**: FileHandler 对象
    - **说明**: 该方法创建一个文件处理程序，将日志信息写入指定的文件中。
  - `logging.StreamHandler(stream)`: 流处理程序，用于将日志输出到控制台。
    - **参数**:
      - `stream`: 日志输出流（默认输出到控制台）
    - **返回**: StreamHandler 对象
    - **说明**: 该方法创建一个流处理程序，将日志信息输出到控制台或指定的流中。
  - `logging.getLogger(name)`: 获取日志实例。
    - **参数**:
      - `name`: 日志记录器的名称
    - **返回**: Logger 对象
    - **说明**: 该方法获取一个日志记录器实例，用于记录日志信息。
  - `logging.error(msg)`: 记录错误日志。
    - **参数**:
      - `msg`: 错误信息
    - **返回**: 无
    - **说明**: 该方法记录一条错误级别的日志信息。
  - `log_exception(logger, exception)`: 记录异常日志。
    - **参数**:
      - `logger`: Logger 对象
      - `exception`: 异常对象
    - **返回**: 无
    - **说明**: 该方法接受一个 Logger 对象和一个异常对象，将异常信息记录到日志中。

## 安装和运行

### 环境要求

- Python 3.x
- 依赖库：请参考`requirements.txt`

### 安装步骤

1. 克隆或下载项目代码。
2. 安装依赖库：
   ```bash
   pip install -r requirements.txt -i https://pypi.tuna.tsinghua.edu.cn/simple
   ```
3. 运行主程序：
  项目目录需要包含`path_to_your_file.xlsx`文件
   ```bash
   python main.py
   ```

## 使用说明

1. 启动程序后，主窗口将显示奖项数据的树状视图。
2. 用户可以通过搜索框搜索特定的奖项数据。
3. 点击树状视图中的奖项条目，将打开奖项详情对话框，显示详细信息和相关图片。
4. 在奖项详情对话框中，用户可以旋转或镜像图片，并更新奖项积分。

## 贡献指南

欢迎贡献代码和报告问题。请遵循以下步骤：

1. 
2. 
3. 
4. 
5. 

## 项目时序图

![test3.png](test3.png)

### of 🍊🐟🐱

——————
E:\部门\奖项证书收集\OVER\template_initializer.py
————————
import os

import build_list
from logger import get_logger, log_exception

logger = get_logger(__name__)

def get_embedded_file():
    binary_data = bytes.fromhex('')
    return binary_data

def initialize_template():
    new_file_xlsx = 'newFile.xlsx'
    if not os.path.exists('%s' % new_file_xlsx):
        logger.debug(f"未发现目标文件{new_file_xlsx}，开始创建")
        from template_initializer import get_embedded_file

        # Restore the file from the embedded binary data
        with open('newFile.xlsx', 'wb') as file:
            file.write(get_embedded_file())
        logger.debug("目标文件创建成功")

    build_summary_xlsx = 'Build_Summary.xlsx'
    if not os.path.exists(build_summary_xlsx):
        logger.debug(f"未发现目标文件{build_summary_xlsx}，开始创建")
        # Restore the file from the embedded binary data
        build_list.build()
        logger.debug("目标文件创建成功")

——————
E:\部门\奖项证书收集\OVER\test.py
————————
import os
from pathlib import Path

# === 配置区（按需改） ===
PROJECT_ROOT = Path(r"E:\部门\奖项证书收集\OVER")        # 项目根目录
# FRONT_ROOT   = PROJECT_ROOT / "frontend"            # 前端根目录
# BACK_ROOT    = PROJECT_ROOT / "backend"             # 后端根目录
OUT_DIR      = PROJECT_ROOT                         # 输出到项目根目录

# 要包含的后缀（大小写不敏感）
# FRONT_EXTS = {".jsx", ".js", ".tsx", ".ts", ".css", ".html", ".json"}
# BACK_EXTS  = {".py", ".json"}
PROJECT_EXTS  = {".py", ".json",".md"}

# 需要忽略的目录名（遇到这些目录就不往里走）
IGNORE_DIRS = {
    "node_modules", "dist", "build", ".git", ".idea", ".vscode",
    ".venv", "__pycache__", ".next", ".sass-cache", "coverage"
}

RECURSIVE = True   # True 递归扫描；False 只扫描根目录下一层文件

# === 工具函数 ===
def list_files(root: Path, allow_exts: set[str], ignore_dirs: set[str], recursive: bool) -> list[Path]:
    allow_exts = {e.lower() for e in allow_exts}
    files: list[Path] = []

    if recursive:
        for dirpath, dirnames, filenames in os.walk(root):
            # 过滤忽略目录
            dirnames[:] = [d for d in dirnames if d not in ignore_dirs]
            for fn in filenames:
                p = Path(dirpath) / fn
                if p.suffix.lower() in allow_exts:
                    files.append(p)
    else:
        for p in root.iterdir():
            if p.is_file() and p.suffix.lower() in allow_exts:
                files.append(p)

    # 按相对路径排序，输出稳定
    files.sort(key=lambda p: str(p.relative_to(root)).lower())
    return files

def merge_to_txt(name: str, files: list[Path], out_dir: Path):
    output_file = out_dir / f"{name}.txt"
    with open(output_file, "w", encoding="utf-8") as out:
        for p in files:
            out.write(str(p) + "\n")
            out.write("————————\n")  # 分隔线（保留你原来的格式）
            try:
                with open(p, "r", encoding="utf-8", errors="ignore") as f:
                    out.write(f.read())
            except Exception as e:
                out.write(f"\n[无法读取: {e}]\n")
            out.write("\n——————\n")
    print("合并完成，输出文件：", output_file)

if __name__ == "__main__":
    # back_files  = list_files(BACK_ROOT,  BACK_EXTS,  IGNORE_DIRS, RECURSIVE)
    # front_files = list_files(FRONT_ROOT, FRONT_EXTS, IGNORE_DIRS, RECURSIVE)
    #
    # merge_to_txt("back",  back_files,  OUT_DIR)
    # merge_to_txt("front", front_files, OUT_DIR)

    files = list_files(PROJECT_ROOT, PROJECT_EXTS, IGNORE_DIRS, RECURSIVE)
    merge_to_txt("all", files, OUT_DIR)
——————
